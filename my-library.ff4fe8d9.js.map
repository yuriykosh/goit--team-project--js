{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,S,aAGAC,aAAaC,QADO,QACc,KAElC,MAAMC,EAAO,CACTC,QAASC,SAASC,cAAc,mBAChCC,OAAQF,SAASC,cAAc,kBAC/BE,UAAWH,SAASC,cAAc,YAKtCH,EAAKC,QAAQK,iBAAiB,SAE9B,SAAwBC,GACH,CAyElBP,EAAKK,UAAUG,UAAY,GAvE9B,MAAMC,EAAS,ojBAafT,EAAKK,UAAUK,mBAAmB,YAAaD,E,KAsC/CE,eAA4BC,GACxBC,QAAQC,IAAI,SACZ,IACI,MAAMC,QAAiBC,EAAAC,WAAWC,cAAcN,IAC1CO,KAAEA,GAASJ,EAEjBF,QAAQC,IAAIK,GACZC,aAAaD,E,CAGjB,MAAME,GAGF,OADAR,QAAQC,IAAIO,GACLzB,EAAA0B,OAAOC,QAAQ,gD,EAI7BC,CAAa","sources":["src/js/watchedQueuedList.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport { ApiService } from './ApiServise';\nconst STORAGE_KEY = 'movie';\nlocalStorage.setItem(STORAGE_KEY, 520);\n\nconst refs = {\n    watched: document.querySelector('.button-watched'), \n    queued: document.querySelector('.button-queued'), \n    movieList: document.querySelector('.movies'), \n}\n\nconst userId = 5;\n\nrefs.watched.addEventListener('click', onWatchedClick);\n\nfunction onWatchedClick(event) {\n   if (userId === 5) {\nclearMovieList();   \nconst markUp = `<li class=\"movies__item\">\n        <div class=\"movies__wrapper\">\n          <img loading=\"lazy\" class=\"movies__poster\" src=\"/mobile-poster-filler.68d38ad9.jpeg\" alt=\"movies__poster\">\n        </div>\n        <div class=\"movies__meta\">\n          <h2 class=\"movies__title\">Monster Hunter</h2>\n          <div class=\"movies__desc\">\n            <span class=\"movies__desc-genres\">Drama, Action</span>|\n            <span class=\"movies__desc-release-year\">2020</span>\n            <span class=\"movies__vote\">8.3</span>\n          </div>\n        </div>\n      </li>`;\nrefs.movieList.insertAdjacentHTML('beforeend', markUp);\n} \n}\n\nexport default function createMovieMarkup(results) {\n    return results.map(result => {\n      const { genre_ids, poster_path, release_date, title, vote_average } = result;\n      const posterLink = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n      const releaseYear = release_date.slice(0, 4);\n      const genresList = data.genres.filter(genre => genre_ids.includes(genre.id))\n      .map(item => item.name);\n      const genres = genresList.length > 2 ? [genresList[0], genresList[1], 'Other'].join(', ') : genresList.join(', ');\n      const defaultImage = \"/src/images/mobile-poster-filler.jpeg\";\n      const voteAverage = vote_average.toFixed(1);\n\n     return `\n     <li class=\"movies__item\">\n        <div class=\"movies__wrapper\">\n          <img\n            loading=\"lazy\"\n            class=\"movies__poster\"\n            src=${posterLink}\n            onerror=${defaultImage}\n            alt=${title}\n          />\n        </div>\n        <div class=\"movies__meta\">\n          <h2 class=\"movies__title\">${title}</h2>\n          <div class=\"movies__desc\">\n            <span class=\"movies__desc-genres\">${genres}</span>|\n            <span class=\"movies__desc-release-year\">${releaseYear}</span>\n            <span class=\"movies__vote is-hidden\">${voteAverage}</span>\n          </div>\n        </div>\n      </li>`;\n     })\n }     \n\nasync function watchedMovie(id) {\n    console.log('hello')\n    try { \n        const response = await ApiService.getMoviesById(id);\n        const { data } = response;\n\n        console.log(data);\n        createMarkup(data); \n\n    }\n    catch(error) {\n     \n        console.log(error);\n        return Notify.failure('Something went wrong. Please try again later.');\n    }\n}\n \n watchedMovie(505642)\n\nfunction clearMovieList(){\n   refs.movieList.innerHTML = \"\"; \n}"],"names":["$7Y9D8","parcelRequire","localStorage","setItem","$f9e64c9db0cf690d$var$refs","watched","document","querySelector","queued","movieList","addEventListener","event","innerHTML","markUp","insertAdjacentHTML","async","id","console","log","response","$cnvsZ","ApiService","getMoviesById","data","createMarkup","error","Notify","failure","$f9e64c9db0cf690d$var$watchedMovie"],"version":3,"file":"my-library.ff4fe8d9.js.map"}