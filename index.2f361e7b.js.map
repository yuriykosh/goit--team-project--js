{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/runtime-4dca91cfab1c7a90.js","src/js/searchMovies.js","node_modules/@parcel/runtime-js/lib/runtime-8f540fab76abb421.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"EVgbq\\\":\\\"index.2f361e7b.js\\\",\\\"dz3oS\\\":\\\"empty-list.42b24b97.gif\\\",\\\"5UbS1\\\":\\\"index.28ddbefc.css\\\",\\\"2hvCh\\\":\\\"index.a53becb9.js\\\"}\"));","import { Notify } from 'notiflix';\nimport { ApiService } from './ApiServise';\nimport { createMainMarkup } from './markUp';\nimport { spinnerStart, spinnerStop } from './spinner';\nimport { pagination } from './tuiPagination';\nimport { onScroll, onToTopBtn } from \"./scroll-to-top\";\nimport empty from '../images/empty-list.gif';\n\nconst gallery = document.querySelector('.movies');\nconst formEl = document.querySelector('.js-form');\nconst paginationBlock = document.querySelector('.tui-pagination')\nconst currentPage = pagination.getCurrentPage();\nconst toTopBtn = document.querySelector('.btn-to-top');\n\nformEl.addEventListener('submit', onFormSubmit);\nwindow.addEventListener('scroll', onScroll);\ntoTopBtn.addEventListener('click', onToTopBtn);\n\nNotify.init({\n  width: '400px',\n  clickToClose: true,\n});\n\nfetchTrendMovies();\npagination.on('afterMove', loadMoreTrendingMovies);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  \n  const searchValue = e.currentTarget.elements.query.value.trim();\n\n  if (!searchValue) {\n    return Notify.failure('Please insert the name of the movie.');\n  }\n\n  paginationBlock.classList.add('is-hidden');\n  pagination.off('afterMove', loadMoreTrendingMovies);\n  pagination.off('afterMove', loadMoreSearchingPhotos);\n  pagination.on('afterMove', loadMoreSearchingPhotos);\n  ApiService.query = searchValue;\n\n  if (ApiService.query === '') {\n    return Notify.failure('Please insert the name of the movie.');\n  }\n\n  formEl.reset();\n  gallery.innerHTML = '';\n  fetchMovies();\n}\n\nasync function fetchMovies() {\n  try {\n    spinnerStart();\n    const response = await ApiService.getMoviesByName(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n\n    pagination.reset(total_results);\n\n    if (results.length === 0) {\n      spinnerStop();\n      gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\"/>\n    </li>`;\n      return Notify.failure(\n        'Sorry, there are no movies matching your search query. Please try again.'\n      );\n    }\n\n    if (total_results !== 0) {\n      Notify.success(`Hooray! We found ${total_results} movies.`);\n    }\n\n    const markUp = createMainMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n    paginationBlock.classList.remove('is-hidden');\n  } catch (error) {\n    console.log(error);\n    gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\"/>\n    </li>`;\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function loadMoreSearchingPhotos(event) {\n  const currentPage = event.page;\n  try {\n    spinnerStart();\n    const response = await ApiService.getMoviesByName(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n    const markUp = createMainMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n  } catch (err) {\n    paginationBlock.classList.add('is-hidden');\n    console.log(error);\n    gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\"/>\n    </li>`;\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function fetchTrendMovies() {\n  try {\n    spinnerStart();\n    const response = await ApiService.getTrendMovies(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n\n    pagination.reset(total_results);    \n    \n    if (results.length === 0) {\n      spinnerStop();\n      gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\"/>\n    </li>`;\n      return Notify.failure(\n        'Trending movies are not available. Please insert the name of the movie.'\n      );\n    }\n\n    const markUp = createMainMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n    paginationBlock.classList.remove('is-hidden');\n  } catch (error) {\n    console.log(error);\n    gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\"/>\n    </li>`;\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function loadMoreTrendingMovies(event) {\n  const currentsPage = event.page;\n\n  try {\n    spinnerStart();\n    const response = await ApiService.getTrendMovies(currentsPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n    const markUp = createMainMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n  } catch (err) {\n    paginationBlock.classList.add('is-hidden');\n    gallery.innerHTML = `<li>\n      <p class=\"empty__notify\">where is everyone?</p>\n      <img src=\"${empty}\" alt=\"The list is empty.\" />\n    </li>`;\n    console.log(err);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}","module.exports = require('./helpers/bundle-url').getBundleURL('EVgbq') + require('./helpers/bundle-manifest').resolve(\"dz3oS\");"],"names":["parcelRequire","register","JSON","parse","$bpxeT","$2e71e38bbaa1d0b8$exports","getBundleURL","resolve","$e1a441075edf8b92$var$gallery","document","querySelector","$e1a441075edf8b92$var$formEl","$e1a441075edf8b92$var$paginationBlock","$e1a441075edf8b92$var$currentPage","$5V9Cu","pagination","getCurrentPage","$e1a441075edf8b92$var$toTopBtn","$e1a441075edf8b92$var$_fetchMovies","$parcel$interopDefault","$2TvXO","mark","_callee","response","genresList","data","results","total_results","markUp","$j1lrD","spinnerStart","$2nBDz","ApiService","getMoviesByName","_ctx","sent","getGenresList","page","total_pages","reset","length","spinnerStop","innerHTML","concat","$6JpON","Notify","failure","success","$8f3h1","createMainMarkup","join","classList","remove","console","log","t0","apply","this","arguments","$e1a441075edf8b92$var$loadMoreSearchingPhotos","event","$e1a441075edf8b92$var$_loadMoreSearchingPhotos","currentPage1","add","error","$e1a441075edf8b92$var$_fetchTrendMovies","getTrendMovies","$e1a441075edf8b92$var$loadMoreTrendingMovies","$e1a441075edf8b92$var$_loadMoreTrendingMovies","currentsPage","addEventListener","e","preventDefault","searchValue","currentTarget","elements","query","value","trim","off","on","$e1a441075edf8b92$var$fetchMovies","window","$8vL8o","onScroll","onToTopBtn","init","width","clickToClose","$e1a441075edf8b92$var$fetchTrendMovies"],"version":3,"file":"index.2f361e7b.js.map"}