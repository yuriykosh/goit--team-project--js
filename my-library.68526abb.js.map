{"mappings":"kpBAsBA,IAAAA,EACAC,E,iJArBA,IAAIC,EAAU,GAoBdF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,G,EAelCL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,C,KCnBTE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,sMCAzD,I,EAAAH,EAAA,S,sBCAAI,EAAiB,IAAAC,IAAoBL,EAAA,SAAAM,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,W,2CDS5F,MAAMC,EAAO,CACTC,QAASC,SAASC,cAAc,mBAChCC,OAAQF,SAASC,cAAc,kBAC/BE,UAAWH,SAASC,cAAc,WAClCG,gBAAiBJ,SAASC,cAAc,eACxCI,SAAUL,SAASC,cAAc,gBAGrCK,OAAOC,iBAAiB,SAAUC,EAAAC,UAClCX,EAAKC,QAAQQ,iBAAiB,QAASG,GACvCZ,EAAKI,OAAOK,iBAAiB,QAASG,GACtCZ,EAAKO,SAASE,iBAAiB,QAASC,EAAAG,YAExC,IAAIC,EAAc,UAElB,SAASF,EAAQG,GACfD,EAAcC,EAAMC,OAAOC,QAAQC,KACnC,IAAIb,EAAYc,EAAAC,QAAoBC,KAAKP,GACvB,YAAhBA,GACFd,EAAKC,QAAQqB,UAAUC,IAAI,aAC3BvB,EAAKI,OAAOkB,UAAUE,OAAO,eAE7BxB,EAAKI,OAAOkB,UAAUC,IAAI,aAC1BvB,EAAKC,QAAQqB,UAAUE,OAAO,cA6BjB,SAAwBC,GACrC,IAAKA,EAKH,YAJEzB,EAAKK,UAAUqB,UAAY,mCAEbC,EAAAlC,iDAIpB,EAAAmC,EAAAC,qBAAoBJ,E,CAjCpBK,CAAezB,E","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-6161ec61505e5586.js","src/js/watchedQueuedList.js","node_modules/@parcel/runtime-js/lib/runtime-c578acf25ab98737.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1zJhX\\\":\\\"my-library.68526abb.js\\\",\\\"32lSb\\\":\\\"empty-list.42b24b97.gif\\\",\\\"5UbS1\\\":\\\"index.89eee40d.css\\\",\\\"b9auz\\\":\\\"index.92ecf10e.js\\\"}\"));","import { Notify } from 'notiflix';\nimport { ApiService } from './ApiServise';\nimport { spinnerStart, spinnerStop } from \"./spinner\";\nimport empty from '../images/empty-list.gif';\n// import { pagination } from './tuiPagination';\nimport { onScroll, onToTopBtn } from \"./scroll-to-top\";\nimport { createGalleryMarkup } from './markUp';\nimport localStorageService from './localStorage-service';\n\nconst refs = {\n    watched: document.querySelector('.button-watched'), \n    queued: document.querySelector('.button-queued'), \n    movieList: document.querySelector('.movies'), \n    paginationBlock: document.querySelector('#pagination'),\n    toTopBtn: document.querySelector('.btn-to-top'),\n}\n\nwindow.addEventListener('scroll', onScroll);\nrefs.watched.addEventListener('click', onClick);\nrefs.queued.addEventListener('click', onClick);\nrefs.toTopBtn.addEventListener('click', onToTopBtn);\n\nlet STORAGE_KEY = 'WATCHED';\n\nfunction onClick(event) {\n  STORAGE_KEY = event.target.dataset.name;\n  let movieList = localStorageService.load(STORAGE_KEY); \nif (STORAGE_KEY === 'WATCHED') {\n  refs.watched.classList.add('is-active');\n  refs.queued.classList.remove('is-active');\n} else{\n  refs.queued.classList.add('is-active');\n  refs.watched.classList.remove('is-active');\n}\n\n  // clearMovieList();   \nloadMoviesList(movieList);\n\n\n}\n\n\n\n// refs.watched.classList.add('is-active');\n// refs.paginationBlock.classList.add('is-hidden');\n\n\n\n// let idList = localStorageService.load(STORAGE_KEY);\n\n// let totalItems = !idList ? 0 : idList.length;\n// pagination.reset(totalItems);\n// const currentPage = pagination.getCurrentPage();\n// loadMoviesList(idList);\n\n// pagination.on('afterMove', loadMore);  \n\n\n\n\n\nexport default function loadMoviesList(list) {\n  if (!list) {\n      refs.movieList.innerHTML = `\n      <li>\n        <img src=\"${empty}\" alt=\"The list is empty.\" />\n      </li>`;\n    return;\n  }\ncreateGalleryMarkup(list);\n  // loadOnePage(currentPage);\n}   \n\nfunction loadOnePage(pageNumber) {\n  for(let i=(pageNumber - 1) * 20 ; i<pageNumber * 20; i+=1) {\n    if (i === totalItems ) {\n      return;\n    }\n    findMovieById(idList[i]);\n  }\n}\n\nasync function findMovieById(id) {\n  try {\n    spinnerStart()\n    const response = await ApiService.getMoviesById(id);\n    const { data } = response;\n\n    const galleryMarkup = createGalleryMarkup(data);\n    refs.movieList.insertAdjacentHTML('beforeend', galleryMarkup);\n    refs.paginationBlock.classList.remove('is-hidden');\n  }\n  catch(error) {\n      console.log(error);\n      refs.paginationBlock.classList.add('is-hidden');\n      return Notify.failure('Something went wrong. Please try again later.');\n  }\n  finally {\n    spinnerStop();\n  }\n}\n\nfunction clearMovieList(){\n   refs.movieList.innerHTML = \"\"; \n   pagination.movePageTo(1);\n}\n\nfunction loadMore(event) {\n  refs.movieList.innerHTML = '';\n  const currentPage = event.page;\n\n  try {\n    spinnerStart();\n    loadOnePage(currentPage);\n    refs.paginationBlock.classList.remove('is-hidden')\n  } catch (error) {\n    refs.paginationBlock.classList.add('is-hidden');\n    console.log(error);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\n\n\n// import { Notify } from 'notiflix';\n// import { ApiService } from './ApiServise';\n// const STORAGE_KEY = 'movie';\n// localStorage.setItem(STORAGE_KEY, 520);\n\n// const refs = {\n//     watched: document.querySelector('.button-watched'), \n//     queued: document.querySelector('.button-queued'), \n//     movieList: document.querySelector('.movies'), \n// }\n\n// const userId = 5;\n\n// refs.watched.addEventListener('click', onWatchedClick);\n\n// function onWatchedClick(event) {\n//    if (userId === 5) {\n// clearMovieList();   \n// const markUp = `<li class=\"movies__item\">\n//         <div class=\"movies__wrapper\">\n//           <img loading=\"lazy\" class=\"movies__poster\" src=\"/mobile-poster-filler.68d38ad9.jpeg\" alt=\"movies__poster\">\n//         </div>\n//         <div class=\"movies__meta\">\n//           <h2 class=\"movies__title\">Monster Hunter</h2>\n//           <div class=\"movies__desc\">\n//             <span class=\"movies__desc-genres\">Drama, Action</span>|\n//             <span class=\"movies__desc-release-year\">2020</span>\n//             <span class=\"movies__vote\">8.3</span>\n//           </div>\n//         </div>\n//       </li>`;\n// refs.movieList.insertAdjacentHTML('beforeend', markUp);\n// } \n// }\n\n// export default function createMovieMarkup(results) {\n//     return results.map(result => {\n//       const { genre_ids, poster_path, release_date, title, vote_average } = result;\n//       const posterLink = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n//       const releaseYear = release_date.slice(0, 4);\n//       const genresList = data.genres.filter(genre => genre_ids.includes(genre.id))\n//       .map(item => item.name);\n//       const genres = genresList.length > 2 ? [genresList[0], genresList[1], 'Other'].join(', ') : genresList.join(', ');\n//       const defaultImage = \"/src/images/mobile-poster-filler.jpeg\";\n//       const voteAverage = vote_average.toFixed(1);\n\n//      return `\n//      <li class=\"movies__item\">\n//         <div class=\"movies__wrapper\">\n//           <img\n//             loading=\"lazy\"\n//             class=\"movies__poster\"\n//             src=${posterLink}\n//             onerror=${defaultImage}\n//             alt=${title}\n//           />\n//         </div>\n//         <div class=\"movies__meta\">\n//           <h2 class=\"movies__title\">${title}</h2>\n//           <div class=\"movies__desc\">\n//             <span class=\"movies__desc-genres\">${genres}</span>|\n//             <span class=\"movies__desc-release-year\">${releaseYear}</span>\n//             <span class=\"movies__vote is-hidden\">${voteAverage}</span>\n//           </div>\n//         </div>\n//       </li>`;\n//      })\n//  }     \n\n// async function watchedMovie(id) {\n//     console.log('hello')\n//     try { \n//         const response = await ApiService.getMoviesById(id);\n//         const { data } = response;\n\n//         console.log(data);\n//         createMarkup(data); \n\n//     }\n//     catch(error) {\n\n//         console.log(error);\n//         return Notify.failure('Something went wrong. Please try again later.');\n//     }\n// }\n\n//  watchedMovie(505642)\n\n// function clearMovieList(){\n//    refs.movieList.innerHTML = \"\"; \n// }","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"32lSb\")).toString();"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$734b9ce990a5e2e3$exports","URL","resolve","import","meta","url","toString","$f9e64c9db0cf690d$var$refs","watched","document","querySelector","queued","movieList","paginationBlock","toTopBtn","window","addEventListener","$dpZmf","onScroll","$f9e64c9db0cf690d$var$onClick","onToTopBtn","$f9e64c9db0cf690d$var$STORAGE_KEY","event","target","dataset","name","$hvBA4","default","load","classList","add","remove","list","innerHTML","$parcel$interopDefault","$kkejX","createGalleryMarkup","$f9e64c9db0cf690d$export$2e2bcd8739ae039"],"version":3,"file":"my-library.68526abb.js.map"}