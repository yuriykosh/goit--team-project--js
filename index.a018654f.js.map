{"mappings":"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","sources":["src/js/searchMovies.js","src/js/markUp.js"],"sourcesContent":["import { Notify } from 'notiflix';\nimport { ApiService } from './ApiServise';\nimport createMarkup from './markUp';\nimport { spinnerStart, spinnerStop } from './spinner';\nimport { pagination } from './tuiPagination';\n\nconst gallery = document.querySelector('.movies');\nconst formEl = document.querySelector('.js-form');\nconst paginationBlock = document.querySelector('.tui-pagination')\nconst currentPage = pagination.getCurrentPage();\nconst player = document.querySelector('.player');\n\nformEl.addEventListener('submit', onFormSubmit);\n\nNotify.init({\n  width: '400px',\n  clickToClose: true,\n});\n\nfetchTrendMovies();\npagination.on('afterMove', loadMoreTrendingMovies);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  \n  const searchValue = e.currentTarget.elements.query.value.trim();\n\n  if (!searchValue) {\n    return Notify.failure('Please insert the name of the movie.');\n  }\n\n  paginationBlock.classList.add('is-hidden');\n  pagination.off('afterMove', loadMoreTrendingMovies);\n  pagination.off('afterMove', loadMoreSearchingPhotos);\n  pagination.on('afterMove', loadMoreSearchingPhotos);\n  ApiService.query = searchValue;\n\n  if (ApiService.query === '') {\n    return Notify.failure('Please insert the name of the movie.');\n  }\n\n  formEl.reset();\n  gallery.innerHTML = '';\n  fetchMovies();\n}\n\nasync function fetchMovies() {\n  try {\n    spinnerStart();\n    const response = await ApiService.getMoviesByName(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n\n    pagination.reset(total_results);\n\n    if (results.length === 0) {\n      spinnerStop();\n      return Notify.failure(\n        'Sorry, there are no movies matching your search query. Please try again.'\n      );\n    }\n\n    if (total_results !== 0) {\n      Notify.success(`Hooray! We found ${total_results} movies.`);\n    }\n\n    const markUp = createMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n    paginationBlock.classList.remove('is-hidden');\n  } catch (error) {\n    console.log(error);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function loadMoreSearchingPhotos(event) {\n  const currentPage = event.page;\n  try {\n    spinnerStart();\n    const response = await ApiService.getMoviesByName(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n    const markUp = createMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n  } catch (err) {\n    paginationBlock.classList.add('is-hidden');\n    console.log(error);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function fetchTrendMovies() {\n  try {\n    spinnerStart();\n    const response = await ApiService.getTrendMovies(currentPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n\n    pagination.reset(total_results);     ///Почему отображается всего 50 страниц?\n    \n    if (results.length === 0) {\n      spinnerStop();\n      return Notify.failure(\n        'Trending movies are not available. Please insert the name of the movie.'\n      );\n    }\n\n    const markUp = createMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n    paginationBlock.classList.remove('is-hidden');\n  } catch (error) {\n    console.log(error);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function loadMoreTrendingMovies(event) {\n  const currentsPage = event.page;\n\n  try {\n    spinnerStart();\n    const response = await ApiService.getTrendMovies(currentsPage);\n    const genresList = await ApiService.getGenresList();\n    const { data } = response;\n    const { page, results, total_pages, total_results } = data;\n    const markUp = createMarkup(results, genresList).join('');\n    gallery.innerHTML = markUp;\n  } catch (err) {\n    paginationBlock.classList.add('is-hidden');\n    console.log(err);\n    return Notify.failure('Something went wrong. Please try again later.');\n  } finally {\n    spinnerStop();\n  }\n}\n\nasync function findMovieTrailer(id) {\n  try {\n    const response = await ApiService.getMovieTreiler(id);\n    const { data } = response;\n\n    console.log(data.results);\n\n    const videoKey = data.results.find(\n      result => result.type === 'Trailer' && result.official\n    ).key;\n    videoID = videoKey;\n    console.log(videoID);\n\n    random(videoID);\n\n  } catch (error) {\n    console.log(error);\n    return Notify.failure('Something went wrong. Please try again later.');\n  }\n}\n\n// findMovieTrailer(615777);\n\n\n\n\n\nfunction random (id) {\n\nconst frame = `<iframe id=\"player\" type=\"text/html\" width=\"640\" height=\"360\"\nsrc=\"http://www.youtube.com/embed/${id}?enablejsapi=1&origin=http://example.com\"frameborder=\"0\"></iframe>`;\nplayer.innerHTML = frame;\n}\nrandom()\n","export default function createMarkup(results, { data }) {\n\n  const defaultImage = `https://raw.githubusercontent.com/yuriykosh/goit--team-project--js/main/src/images/main-home/poster-filler-desktop.jpeg`; ///////////\n\n    return results.map(result => {\n      const { genre_ids, poster_path, release_date, title, vote_average, id } = result;\n      const posterLink = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n      const releaseYear = release_date.slice(0, 4);\n      const genresList = data.genres.filter(genre => genre_ids.includes(genre.id))\n      .map(item => item.name);\n      const genres = genresList.length > 2 ? [genresList[0], genresList[1], 'Other'].join(', ') : genresList.join(', ');\n      const voteAverage = vote_average.toFixed(1);\n\n     return `\n     <li class=\"movies__item\" id=${id}>\n        <div class=\"movies__wrapper\">\n        <img onerror=\"this.onerror=null;this.src='${defaultImage}';\"\n         alt=${title} src=${posterLink} class=\"movies__poster\" loading=\"lazy\">\n        </div>\n        <div class=\"movies__meta\">\n          <h2 class=\"movies__title\">${title}</h2>\n          <div class=\"movies__desc\">\n            <span class=\"movies__desc-genres\">${genres}</span>|\n            <span class=\"movies__desc-release-year\">${releaseYear}</span>\n            <span class=\"movies__vote is-hidden\">${voteAverage}</span>\n          </div>\n        </div>\n      </li>`;\n     })\n }     \n"],"names":["$bpxeT","parcelRequire","$600243812f3c8d9b$export$2e2bcd8739ae039","results","param","data","map","result","genre_ids","poster_path","release_date","title","vote_average","id","posterLink","concat","releaseYear","slice","genresList","genres","filter","genre","includes","item","name","length","join","voteAverage","toFixed","$e1a441075edf8b92$var$gallery","document","querySelector","$e1a441075edf8b92$var$formEl","$e1a441075edf8b92$var$paginationBlock","$e1a441075edf8b92$var$currentPage","$5V9Cu","pagination","getCurrentPage","$e1a441075edf8b92$var$player","$e1a441075edf8b92$var$_fetchMovies","$parcel$interopDefault","$2TvXO","mark","_callee","response","total_results","markUp","$j1lrD","spinnerStart","$2nBDz","ApiService","getMoviesByName","_ctx","sent","getGenresList","page","total_pages","reset","spinnerStop","$6JpON","Notify","failure","success","innerHTML","classList","remove","console","log","t0","apply","this","arguments","$e1a441075edf8b92$var$loadMoreSearchingPhotos","event","$e1a441075edf8b92$var$_loadMoreSearchingPhotos","currentPage1","add","error","$e1a441075edf8b92$var$_fetchTrendMovies","getTrendMovies","$e1a441075edf8b92$var$loadMoreTrendingMovies","$e1a441075edf8b92$var$_loadMoreTrendingMovies","currentsPage","$e1a441075edf8b92$var$random","frame","addEventListener","e","preventDefault","searchValue","currentTarget","elements","query","value","trim","off","on","$e1a441075edf8b92$var$fetchMovies","init","width","clickToClose","$e1a441075edf8b92$var$fetchTrendMovies"],"version":3,"file":"index.a018654f.js.map"}